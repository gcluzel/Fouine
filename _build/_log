### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules main.ml > main.ml.depends
# Target: expr.ml.depends, tags: { extension:ml, file:expr.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules expr.ml > expr.ml.depends # cached
# Target: expr.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:expr.cmo, file:expr.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o expr.cmo expr.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/bin/ocamllex -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, parser, quiet }
/usr/bin/ocamlyacc -v parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/bin/ocamlc -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o lexer.cmo lexer.ml # cached
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet }
/usr/bin/ocamlc -c -o main.cmo main.ml
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/bin/ocamldep -modules parser.ml > parser.ml.depends
# Target: expr.cmx, tags: { compile, extension:cmx, extension:ml, file:expr.cmx, file:expr.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o expr.cmx expr.ml
+ /usr/bin/ocamlopt -c -o expr.cmx expr.ml
File "expr.ml", line 63, characters 2-2105:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
ApplyFun (_, _)
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/bin/ocamlopt -c -o parser.cmx parser.ml
+ /usr/bin/ocamlopt -c -o parser.cmx parser.ml
File "parser.mly", line 76, characters 36-39:
Error: This variant expression is expected to have type Expr.prog
       The constructor Fun does not belong to type Expr.prog
Command exited with code 2.
# Compilation unsuccessful.
