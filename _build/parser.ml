type token =
  | Int of (int)
  | Var of (string)
  | Let
  | In
  | If
  | Then
  | Else
  | Plus
  | Times
  | Minus
  | C_eq
  | C_ge
  | C_neq
  | C_g
  | C_l
  | C_le
  | L_par
  | R_par
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* --- préambule: ici du code Caml --- *)

open Expr   (* rappel: dans expr.ml: 
             type expr = Const of int | Add of expr*expr | Mull of expr*expr *)

# 31 "parser.ml"
let yytransl_const = [|
  259 (* Let *);
  260 (* In *);
  261 (* If *);
  262 (* Then *);
  263 (* Else *);
  264 (* Plus *);
  265 (* Times *);
  266 (* Minus *);
  267 (* C_eq *);
  268 (* C_ge *);
  269 (* C_neq *);
  270 (* C_g *);
  271 (* C_l *);
  272 (* C_le *);
  273 (* L_par *);
  274 (* R_par *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* Int *);
  258 (* Var *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\004\000\004\000\004\000\004\000\004\000\
\004\000\000\000"

let yylen = "\002\000\
\002\000\001\000\003\000\002\000\006\000\003\000\003\000\003\000\
\003\000\003\000\003\000\001\000\003\000\003\000\003\000\002\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\012\000\000\000\000\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000"

let yydgoto = "\002\000\
\007\000\008\000\012\000\009\000"

let yysindex = "\002\000\
\001\255\000\000\000\000\011\255\011\255\001\255\000\000\004\000\
\255\254\011\255\001\255\004\255\036\255\000\000\251\254\000\000\
\011\255\011\255\011\255\000\000\253\254\001\255\011\255\011\255\
\011\255\011\255\011\255\011\255\000\000\008\255\000\000\008\255\
\000\000\015\255\255\254\255\254\255\254\255\254\255\254\255\254\
\001\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\000\000\000\000\026\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\000\001\000\000\000\014\000\
\000\000\000\000\017\255\021\255\023\255\025\255\030\255\031\255\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\250\255\000\000\015\000"

let yytablesize = 304
let yytable = "\015\000\
\014\000\003\000\001\000\016\000\021\000\004\000\017\000\018\000\
\019\000\022\000\005\000\003\000\029\000\015\000\033\000\034\000\
\018\000\006\000\013\000\014\000\010\000\041\000\006\000\002\000\
\020\000\004\000\008\000\011\000\011\000\003\000\007\000\030\000\
\031\000\032\000\042\000\009\000\010\000\035\000\036\000\037\000\
\038\000\039\000\040\000\017\000\018\000\019\000\023\000\024\000\
\025\000\026\000\027\000\028\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
\014\000\000\000\014\000\014\000\014\000\014\000\014\000\014\000\
\014\000\000\000\014\000\015\000\015\000\015\000\000\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\002\000\015\000\
\004\000\016\000\016\000\016\000\003\000\013\000\013\000\013\000\
\000\000\002\000\000\000\004\000\000\000\000\000\000\000\003\000"

let yycheck = "\006\000\
\000\000\001\001\001\000\000\000\011\000\005\001\008\001\009\001\
\010\001\006\001\010\001\001\001\018\001\000\000\018\001\022\000\
\009\001\017\001\004\000\005\000\010\001\007\001\006\001\000\000\
\010\000\000\000\006\001\017\001\006\001\000\000\006\001\017\000\
\018\000\019\000\041\000\006\001\006\001\023\000\024\000\025\000\
\026\000\027\000\028\000\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\006\001\007\001\
\008\001\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\255\255\018\001\006\001\007\001\008\001\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\007\001\018\001\
\007\001\008\001\009\001\010\001\007\001\008\001\009\001\010\001\
\255\255\018\001\255\255\018\001\255\255\255\255\255\255\018\001"

let yynames_const = "\
  Let\000\
  In\000\
  If\000\
  Then\000\
  Else\000\
  Plus\000\
  Times\000\
  Minus\000\
  C_eq\000\
  C_ge\000\
  C_neq\000\
  C_g\000\
  C_l\000\
  C_le\000\
  L_par\000\
  R_par\000\
  EOF\000\
  "

let yynames_block = "\
  Int\000\
  Var\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Expr.prog) in
    Obj.repr(
# 36 "parser.mly"
                              ( _1 )
# 210 "parser.ml"
               : Expr.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 39 "parser.mly"
                                ( _1 )
# 217 "parser.ml"
               : Expr.prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Expr.prog) in
    Obj.repr(
# 40 "parser.mly"
                                ( _2 )
# 224 "parser.ml"
               : Expr.prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 41 "parser.mly"
                                ( Min(Const 0, _2) )
# 231 "parser.ml"
               : Expr.prog))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Expr.exprbool) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Expr.prog) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Expr.prog) in
    Obj.repr(
# 45 "parser.mly"
                                ( IfThenElse(_2,_4,_6) )
# 240 "parser.ml"
               : Expr.prog))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 49 "parser.mly"
                            ( Eq(_1, _3) )
# 248 "parser.ml"
               : Expr.exprbool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 50 "parser.mly"
                            ( Gt(_1, _3) )
# 256 "parser.ml"
               : Expr.exprbool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 51 "parser.mly"
                            ( Ge(_1, _3) )
# 264 "parser.ml"
               : Expr.exprbool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 52 "parser.mly"
                            ( Lt(_1, _3) )
# 272 "parser.ml"
               : Expr.exprbool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 53 "parser.mly"
                            ( Le(_1, _3) )
# 280 "parser.ml"
               : Expr.exprbool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 54 "parser.mly"
                            ( Neq(_1, _3) )
# 288 "parser.ml"
               : Expr.exprbool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 58 "parser.mly"
                            ( Const _1 )
# 295 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Expr.prog) in
    Obj.repr(
# 59 "parser.mly"
                            ( _2 )
# 302 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 60 "parser.mly"
                            ( Add(_1, _3) )
# 310 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 61 "parser.mly"
                            ( Min(_1, _3) )
# 318 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 62 "parser.mly"
                            ( Min(Const 0, _2) )
# 325 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 63 "parser.mly"
                            ( Mul(_1, _3) )
# 333 "parser.ml"
               : Expr.expr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Expr.prog)
