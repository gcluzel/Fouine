   0  $accept : %entry% $end

   1  main : prog EOF

   2  prog : Int
   3       | Var
   4       | L_par prog R_par
   5       | prog Plus prog
   6       | prog Minus prog
   7       | Minus prog
   8       | prog Times prog
   9       | Let Var C_eq prog In prog
  10       | If exprb Then prog Else prog

  11  exprb : L_par exprb L_par
  12        | prog C_eq prog
  13        | prog C_g prog
  14        | prog C_ge prog
  15        | prog C_l prog
  16        | prog C_le prog
  17        | prog C_neq prog

  18  %entry% : '\001' main

state 0
	$accept : . %entry% $end  (0)

	'\001'  shift 1
	.  error

	%entry%  goto 2


state 1
	%entry% : '\001' . main  (18)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	main  goto 9
	prog  goto 10


state 2
	$accept : %entry% . $end  (0)

	$end  accept


state 3
	prog : Int .  (2)

	.  reduce 2


state 4
	prog : Var .  (3)

	.  reduce 3


state 5
	prog : Let . Var C_eq prog In prog  (9)

	Var  shift 11
	.  error


state 6
	prog : If . exprb Then prog Else prog  (10)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 12
	.  error

	prog  goto 13
	exprb  goto 14


state 7
	prog : Minus . prog  (7)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 15


state 8
	prog : L_par . prog R_par  (4)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 16


state 9
	%entry% : '\001' main .  (18)

	.  reduce 18


state 10
	main : prog . EOF  (1)
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)

	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	EOF  shift 20
	.  error


state 11
	prog : Let Var . C_eq prog In prog  (9)

	C_eq  shift 21
	.  error


state 12
	prog : L_par . prog R_par  (4)
	exprb : L_par . exprb L_par  (11)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 12
	.  error

	prog  goto 22
	exprb  goto 23


state 13
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	exprb : prog . C_eq prog  (12)
	exprb : prog . C_g prog  (13)
	exprb : prog . C_ge prog  (14)
	exprb : prog . C_l prog  (15)
	exprb : prog . C_le prog  (16)
	exprb : prog . C_neq prog  (17)

	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	C_eq  shift 24
	C_ge  shift 25
	C_neq  shift 26
	C_g  shift 27
	C_l  shift 28
	C_le  shift 29
	.  error


state 14
	prog : If exprb . Then prog Else prog  (10)

	Then  shift 30
	.  error


state 15
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : Minus prog .  (7)
	prog : prog . Times prog  (8)

	.  reduce 7


state 16
	prog : L_par prog . R_par  (4)
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)

	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	R_par  shift 31
	.  error


state 17
	prog : prog Plus . prog  (5)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 32


state 18
	prog : prog Times . prog  (8)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 33


state 19
	prog : prog Minus . prog  (6)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 34


state 20
	main : prog EOF .  (1)

	.  reduce 1


state 21
	prog : Let Var C_eq . prog In prog  (9)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 35


state 22
	prog : L_par prog . R_par  (4)
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	exprb : prog . C_eq prog  (12)
	exprb : prog . C_g prog  (13)
	exprb : prog . C_ge prog  (14)
	exprb : prog . C_l prog  (15)
	exprb : prog . C_le prog  (16)
	exprb : prog . C_neq prog  (17)

	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	C_eq  shift 24
	C_ge  shift 25
	C_neq  shift 26
	C_g  shift 27
	C_l  shift 28
	C_le  shift 29
	R_par  shift 31
	.  error


state 23
	exprb : L_par exprb . L_par  (11)

	L_par  shift 36
	.  error


state 24
	exprb : prog C_eq . prog  (12)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 37


state 25
	exprb : prog C_ge . prog  (14)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 38


state 26
	exprb : prog C_neq . prog  (17)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 39


state 27
	exprb : prog C_g . prog  (13)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 40


state 28
	exprb : prog C_l . prog  (15)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 41


state 29
	exprb : prog C_le . prog  (16)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 42


state 30
	prog : If exprb Then . prog Else prog  (10)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 43


state 31
	prog : L_par prog R_par .  (4)

	.  reduce 4


state 32
	prog : prog . Plus prog  (5)
	prog : prog Plus prog .  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)

	Times  shift 18
	In  reduce 5
	Then  reduce 5
	Else  reduce 5
	Plus  reduce 5
	Minus  reduce 5
	C_eq  reduce 5
	C_ge  reduce 5
	C_neq  reduce 5
	C_g  reduce 5
	C_l  reduce 5
	C_le  reduce 5
	L_par  reduce 5
	R_par  reduce 5
	EOF  reduce 5


state 33
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	prog : prog Times prog .  (8)

	.  reduce 8


state 34
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog Minus prog .  (6)
	prog : prog . Times prog  (8)

	Times  shift 18
	In  reduce 6
	Then  reduce 6
	Else  reduce 6
	Plus  reduce 6
	Minus  reduce 6
	C_eq  reduce 6
	C_ge  reduce 6
	C_neq  reduce 6
	C_g  reduce 6
	C_l  reduce 6
	C_le  reduce 6
	L_par  reduce 6
	R_par  reduce 6
	EOF  reduce 6


state 35
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	prog : Let Var C_eq prog . In prog  (9)

	In  shift 44
	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	.  error


state 36
	exprb : L_par exprb L_par .  (11)

	.  reduce 11


state 37
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	exprb : prog C_eq prog .  (12)

	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	Then  reduce 12
	L_par  reduce 12


state 38
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	exprb : prog C_ge prog .  (14)

	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	Then  reduce 14
	L_par  reduce 14


state 39
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	exprb : prog C_neq prog .  (17)

	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	Then  reduce 17
	L_par  reduce 17


state 40
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	exprb : prog C_g prog .  (13)

	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	Then  reduce 13
	L_par  reduce 13


state 41
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	exprb : prog C_l prog .  (15)

	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	Then  reduce 15
	L_par  reduce 15


state 42
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	exprb : prog C_le prog .  (16)

	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	Then  reduce 16
	L_par  reduce 16


state 43
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	prog : If exprb Then prog . Else prog  (10)

	Else  shift 45
	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	.  error


state 44
	prog : Let Var C_eq prog In . prog  (9)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 46


state 45
	prog : If exprb Then prog Else . prog  (10)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 47


state 46
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	prog : Let Var C_eq prog In prog .  (9)

	Plus  shift 17
	Times  shift 18
	Minus  shift 19
	In  reduce 9
	Then  reduce 9
	Else  reduce 9
	C_eq  reduce 9
	C_ge  reduce 9
	C_neq  reduce 9
	C_g  reduce 9
	C_l  reduce 9
	C_le  reduce 9
	L_par  reduce 9
	R_par  reduce 9
	EOF  reduce 9


state 47
	prog : prog . Plus prog  (5)
	prog : prog . Minus prog  (6)
	prog : prog . Times prog  (8)
	prog : If exprb Then prog Else prog .  (10)

	.  reduce 10


23 terminals, 5 nonterminals
19 grammar rules, 48 states
