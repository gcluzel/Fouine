   0  $accept : %entry% $end

   1  main : prog EOF

   2  prog : expr
   3       | L_par prog R_par
   4       | Let Var C_eq prog In prog
   5       | If exprb Then prog Else prog

   6  exprb : expr C_eq expr
   7        | expr C_g expr
   8        | expr C_ge expr
   9        | expr C_l expr
  10        | expr C_le expr
  11        | expr C_neq expr

  12  expr : Int
  13       | Var
  14       | L_par expr R_par
  15       | expr Plus expr
  16       | expr Minus expr
  17       | Minus expr
  18       | expr Times expr

  19  %entry% : '\001' main

state 0
	$accept : . %entry% $end  (0)

	'\001'  shift 1
	.  error

	%entry%  goto 2


state 1
	%entry% : '\001' . main  (19)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	main  goto 9
	prog  goto 10
	expr  goto 11


state 2
	$accept : %entry% . $end  (0)

	$end  accept


state 3
	expr : Int .  (12)

	.  reduce 12


state 4
	expr : Var .  (13)

	.  reduce 13


state 5
	prog : Let . Var C_eq prog In prog  (4)

	Var  shift 12
	.  error


state 6
	prog : If . exprb Then prog Else prog  (5)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	exprb  goto 14
	expr  goto 15


state 7
	expr : Minus . expr  (17)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	expr  goto 16


state 8
	prog : L_par . prog R_par  (3)
	expr : L_par . expr R_par  (14)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 17
	expr  goto 18


state 9
	%entry% : '\001' main .  (19)

	.  reduce 19


state 10
	main : prog . EOF  (1)

	EOF  shift 19
	.  error


state 11
	prog : expr .  (2)
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)

	Plus  shift 20
	Times  shift 21
	Minus  shift 22
	In  reduce 2
	Else  reduce 2
	R_par  reduce 2
	EOF  reduce 2


state 12
	prog : Let Var . C_eq prog In prog  (4)

	C_eq  shift 23
	.  error


state 13
	expr : L_par . expr R_par  (14)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	expr  goto 24


state 14
	prog : If exprb . Then prog Else prog  (5)

	Then  shift 25
	.  error


state 15
	exprb : expr . C_eq expr  (6)
	exprb : expr . C_g expr  (7)
	exprb : expr . C_ge expr  (8)
	exprb : expr . C_l expr  (9)
	exprb : expr . C_le expr  (10)
	exprb : expr . C_neq expr  (11)
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)

	Plus  shift 20
	Times  shift 21
	Minus  shift 22
	C_eq  shift 26
	C_ge  shift 27
	C_neq  shift 28
	C_g  shift 29
	C_l  shift 30
	C_le  shift 31
	.  error


state 16
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : Minus expr .  (17)
	expr : expr . Times expr  (18)

	.  reduce 17


state 17
	prog : L_par prog . R_par  (3)

	R_par  shift 32
	.  error


18: shift/reduce conflict (shift 33, reduce 2) on R_par
state 18
	prog : expr .  (2)
	expr : L_par expr . R_par  (14)
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)

	Plus  shift 20
	Times  shift 21
	Minus  shift 22
	R_par  shift 33


state 19
	main : prog EOF .  (1)

	.  reduce 1


state 20
	expr : expr Plus . expr  (15)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	expr  goto 34


state 21
	expr : expr Times . expr  (18)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	expr  goto 35


state 22
	expr : expr Minus . expr  (16)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	expr  goto 36


state 23
	prog : Let Var C_eq . prog In prog  (4)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 37
	expr  goto 11


state 24
	expr : L_par expr . R_par  (14)
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)

	Plus  shift 20
	Times  shift 21
	Minus  shift 22
	R_par  shift 33
	.  error


state 25
	prog : If exprb Then . prog Else prog  (5)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 38
	expr  goto 11


state 26
	exprb : expr C_eq . expr  (6)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	expr  goto 39


state 27
	exprb : expr C_ge . expr  (8)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	expr  goto 40


state 28
	exprb : expr C_neq . expr  (11)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	expr  goto 41


state 29
	exprb : expr C_g . expr  (7)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	expr  goto 42


state 30
	exprb : expr C_l . expr  (9)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	expr  goto 43


state 31
	exprb : expr C_le . expr  (10)

	Int  shift 3
	Var  shift 4
	Minus  shift 7
	L_par  shift 13
	.  error

	expr  goto 44


state 32
	prog : L_par prog R_par .  (3)

	.  reduce 3


state 33
	expr : L_par expr R_par .  (14)

	.  reduce 14


state 34
	expr : expr . Plus expr  (15)
	expr : expr Plus expr .  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)

	Times  shift 21
	In  reduce 15
	Then  reduce 15
	Else  reduce 15
	Plus  reduce 15
	Minus  reduce 15
	C_eq  reduce 15
	C_ge  reduce 15
	C_neq  reduce 15
	C_g  reduce 15
	C_l  reduce 15
	C_le  reduce 15
	R_par  reduce 15
	EOF  reduce 15


state 35
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)
	expr : expr Times expr .  (18)

	.  reduce 18


state 36
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr Minus expr .  (16)
	expr : expr . Times expr  (18)

	Times  shift 21
	In  reduce 16
	Then  reduce 16
	Else  reduce 16
	Plus  reduce 16
	Minus  reduce 16
	C_eq  reduce 16
	C_ge  reduce 16
	C_neq  reduce 16
	C_g  reduce 16
	C_l  reduce 16
	C_le  reduce 16
	R_par  reduce 16
	EOF  reduce 16


state 37
	prog : Let Var C_eq prog . In prog  (4)

	In  shift 45
	.  error


state 38
	prog : If exprb Then prog . Else prog  (5)

	Else  shift 46
	.  error


state 39
	exprb : expr C_eq expr .  (6)
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)

	Plus  shift 20
	Times  shift 21
	Minus  shift 22
	Then  reduce 6


state 40
	exprb : expr C_ge expr .  (8)
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)

	Plus  shift 20
	Times  shift 21
	Minus  shift 22
	Then  reduce 8


state 41
	exprb : expr C_neq expr .  (11)
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)

	Plus  shift 20
	Times  shift 21
	Minus  shift 22
	Then  reduce 11


state 42
	exprb : expr C_g expr .  (7)
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)

	Plus  shift 20
	Times  shift 21
	Minus  shift 22
	Then  reduce 7


state 43
	exprb : expr C_l expr .  (9)
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)

	Plus  shift 20
	Times  shift 21
	Minus  shift 22
	Then  reduce 9


state 44
	exprb : expr C_le expr .  (10)
	expr : expr . Plus expr  (15)
	expr : expr . Minus expr  (16)
	expr : expr . Times expr  (18)

	Plus  shift 20
	Times  shift 21
	Minus  shift 22
	Then  reduce 10


state 45
	prog : Let Var C_eq prog In . prog  (4)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 47
	expr  goto 11


state 46
	prog : If exprb Then prog Else . prog  (5)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	If  shift 6
	Minus  shift 7
	L_par  shift 8
	.  error

	prog  goto 48
	expr  goto 11


state 47
	prog : Let Var C_eq prog In prog .  (4)

	.  reduce 4


state 48
	prog : If exprb Then prog Else prog .  (5)

	.  reduce 5


State 18 contains 1 shift/reduce conflict.


23 terminals, 6 nonterminals
20 grammar rules, 49 states
