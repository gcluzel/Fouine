   0  $accept : %entry% $end

   1  main : prog EOF

   2  prog : apply
   3       | Int
   4       | Var
   5       | L_par prog R_par
   6       | prog Plus prog
   7       | prog Minus prog
   8       | Minus prog
   9       | prog Times prog
  10       | If exprb Then prog Else prog
  11       | PrInt prog
  12       | Let Var C_eq fonction In prog
  13       | Let Var fonction2 In prog
  14       | Let_rec Var C_eq fonction In prog
  15       | Let_rec Var fonction2 In prog

  16  apply : apply2
  17        | apply apply2

  18  apply2 : L_par prog R_par

  19  fonction : prog
  20           | Fun Var Right_arrow fonction

  21  fonction2 : Var C_eq fonction
  22            | Var fonction2

  23  exprb : False
  24        | True
  25        | L_par exprb L_par
  26        | prog C_eq prog
  27        | prog C_g prog
  28        | prog C_ge prog
  29        | prog C_l prog
  30        | prog C_le prog
  31        | prog C_neq prog

  32  %entry% : '\001' main

state 0
	$accept : . %entry% $end  (0)

	'\001'  shift 1
	.  error

	%entry%  goto 2


state 1
	%entry% : '\001' . main  (32)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	main  goto 11
	prog  goto 12
	apply  goto 13
	apply2  goto 14


state 2
	$accept : %entry% . $end  (0)

	$end  accept


state 3
	prog : Int .  (3)

	.  reduce 3


state 4
	prog : Var .  (4)

	.  reduce 4


state 5
	prog : Let . Var C_eq fonction In prog  (12)
	prog : Let . Var fonction2 In prog  (13)

	Var  shift 15
	.  error


state 6
	prog : PrInt . prog  (11)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 16
	apply  goto 13
	apply2  goto 14


state 7
	prog : Let_rec . Var C_eq fonction In prog  (14)
	prog : Let_rec . Var fonction2 In prog  (15)

	Var  shift 17
	.  error


state 8
	prog : If . exprb Then prog Else prog  (10)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	False  shift 18
	True  shift 19
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 20
	.  error

	prog  goto 21
	exprb  goto 22
	apply  goto 13
	apply2  goto 14


state 9
	prog : Minus . prog  (8)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 23
	apply  goto 13
	apply2  goto 14


state 10
	prog : L_par . prog R_par  (5)
	apply2 : L_par . prog R_par  (18)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 24
	apply  goto 13
	apply2  goto 14


state 11
	%entry% : '\001' main .  (32)

	.  reduce 32


state 12
	main : prog . EOF  (1)
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	EOF  shift 28
	.  error


13: shift/reduce conflict (shift 29, reduce 2) on L_par
state 13
	prog : apply .  (2)
	apply : apply . apply2  (17)

	L_par  shift 29
	In  reduce 2
	Then  reduce 2
	Else  reduce 2
	Plus  reduce 2
	Times  reduce 2
	Minus  reduce 2
	C_eq  reduce 2
	C_ge  reduce 2
	C_neq  reduce 2
	C_g  reduce 2
	C_l  reduce 2
	C_le  reduce 2
	R_par  reduce 2
	EOF  reduce 2

	apply2  goto 30


state 14
	apply : apply2 .  (16)

	.  reduce 16


state 15
	prog : Let Var . C_eq fonction In prog  (12)
	prog : Let Var . fonction2 In prog  (13)

	Var  shift 31
	C_eq  shift 32
	.  error

	fonction2  goto 33


state 16
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	prog : PrInt prog .  (11)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	In  reduce 11
	Then  reduce 11
	Else  reduce 11
	C_eq  reduce 11
	C_ge  reduce 11
	C_neq  reduce 11
	C_g  reduce 11
	C_l  reduce 11
	C_le  reduce 11
	L_par  reduce 11
	R_par  reduce 11
	EOF  reduce 11


state 17
	prog : Let_rec Var . C_eq fonction In prog  (14)
	prog : Let_rec Var . fonction2 In prog  (15)

	Var  shift 31
	C_eq  shift 34
	.  error

	fonction2  goto 35


state 18
	exprb : False .  (23)

	.  reduce 23


state 19
	exprb : True .  (24)

	.  reduce 24


state 20
	prog : L_par . prog R_par  (5)
	apply2 : L_par . prog R_par  (18)
	exprb : L_par . exprb L_par  (25)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	False  shift 18
	True  shift 19
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 20
	.  error

	prog  goto 36
	exprb  goto 37
	apply  goto 13
	apply2  goto 14


state 21
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	exprb : prog . C_eq prog  (26)
	exprb : prog . C_g prog  (27)
	exprb : prog . C_ge prog  (28)
	exprb : prog . C_l prog  (29)
	exprb : prog . C_le prog  (30)
	exprb : prog . C_neq prog  (31)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	C_eq  shift 38
	C_ge  shift 39
	C_neq  shift 40
	C_g  shift 41
	C_l  shift 42
	C_le  shift 43
	.  error


state 22
	prog : If exprb . Then prog Else prog  (10)

	Then  shift 44
	.  error


state 23
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : Minus prog .  (8)
	prog : prog . Times prog  (9)

	.  reduce 8


state 24
	prog : L_par prog . R_par  (5)
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	apply2 : L_par prog . R_par  (18)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	R_par  shift 45
	.  error


state 25
	prog : prog Plus . prog  (6)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 46
	apply  goto 13
	apply2  goto 14


state 26
	prog : prog Times . prog  (9)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 47
	apply  goto 13
	apply2  goto 14


state 27
	prog : prog Minus . prog  (7)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 48
	apply  goto 13
	apply2  goto 14


state 28
	main : prog EOF .  (1)

	.  reduce 1


state 29
	apply2 : L_par . prog R_par  (18)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 49
	apply  goto 13
	apply2  goto 14


state 30
	apply : apply apply2 .  (17)

	.  reduce 17


state 31
	fonction2 : Var . C_eq fonction  (21)
	fonction2 : Var . fonction2  (22)

	Var  shift 31
	C_eq  shift 50
	.  error

	fonction2  goto 51


state 32
	prog : Let Var C_eq . fonction In prog  (12)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	Fun  shift 52
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 53
	fonction  goto 54
	apply  goto 13
	apply2  goto 14


state 33
	prog : Let Var fonction2 . In prog  (13)

	In  shift 55
	.  error


state 34
	prog : Let_rec Var C_eq . fonction In prog  (14)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	Fun  shift 52
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 53
	fonction  goto 56
	apply  goto 13
	apply2  goto 14


state 35
	prog : Let_rec Var fonction2 . In prog  (15)

	In  shift 57
	.  error


state 36
	prog : L_par prog . R_par  (5)
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	apply2 : L_par prog . R_par  (18)
	exprb : prog . C_eq prog  (26)
	exprb : prog . C_g prog  (27)
	exprb : prog . C_ge prog  (28)
	exprb : prog . C_l prog  (29)
	exprb : prog . C_le prog  (30)
	exprb : prog . C_neq prog  (31)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	C_eq  shift 38
	C_ge  shift 39
	C_neq  shift 40
	C_g  shift 41
	C_l  shift 42
	C_le  shift 43
	R_par  shift 45
	.  error


state 37
	exprb : L_par exprb . L_par  (25)

	L_par  shift 58
	.  error


state 38
	exprb : prog C_eq . prog  (26)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 59
	apply  goto 13
	apply2  goto 14


state 39
	exprb : prog C_ge . prog  (28)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 60
	apply  goto 13
	apply2  goto 14


state 40
	exprb : prog C_neq . prog  (31)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 61
	apply  goto 13
	apply2  goto 14


state 41
	exprb : prog C_g . prog  (27)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 62
	apply  goto 13
	apply2  goto 14


state 42
	exprb : prog C_l . prog  (29)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 63
	apply  goto 13
	apply2  goto 14


state 43
	exprb : prog C_le . prog  (30)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 64
	apply  goto 13
	apply2  goto 14


state 44
	prog : If exprb Then . prog Else prog  (10)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 65
	apply  goto 13
	apply2  goto 14


45: reduce/reduce conflict (reduce 5, reduce 18) on In
45: reduce/reduce conflict (reduce 5, reduce 18) on Then
45: reduce/reduce conflict (reduce 5, reduce 18) on Else
45: reduce/reduce conflict (reduce 5, reduce 18) on Plus
45: reduce/reduce conflict (reduce 5, reduce 18) on Times
45: reduce/reduce conflict (reduce 5, reduce 18) on Minus
45: reduce/reduce conflict (reduce 5, reduce 18) on C_eq
45: reduce/reduce conflict (reduce 5, reduce 18) on C_ge
45: reduce/reduce conflict (reduce 5, reduce 18) on C_neq
45: reduce/reduce conflict (reduce 5, reduce 18) on C_g
45: reduce/reduce conflict (reduce 5, reduce 18) on C_l
45: reduce/reduce conflict (reduce 5, reduce 18) on C_le
45: reduce/reduce conflict (reduce 5, reduce 18) on L_par
45: reduce/reduce conflict (reduce 5, reduce 18) on R_par
45: reduce/reduce conflict (reduce 5, reduce 18) on EOF
state 45
	prog : L_par prog R_par .  (5)
	apply2 : L_par prog R_par .  (18)

	.  reduce 5


state 46
	prog : prog . Plus prog  (6)
	prog : prog Plus prog .  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)

	Times  shift 26
	In  reduce 6
	Then  reduce 6
	Else  reduce 6
	Plus  reduce 6
	Minus  reduce 6
	C_eq  reduce 6
	C_ge  reduce 6
	C_neq  reduce 6
	C_g  reduce 6
	C_l  reduce 6
	C_le  reduce 6
	L_par  reduce 6
	R_par  reduce 6
	EOF  reduce 6


state 47
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	prog : prog Times prog .  (9)

	.  reduce 9


state 48
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog Minus prog .  (7)
	prog : prog . Times prog  (9)

	Times  shift 26
	In  reduce 7
	Then  reduce 7
	Else  reduce 7
	Plus  reduce 7
	Minus  reduce 7
	C_eq  reduce 7
	C_ge  reduce 7
	C_neq  reduce 7
	C_g  reduce 7
	C_l  reduce 7
	C_le  reduce 7
	L_par  reduce 7
	R_par  reduce 7
	EOF  reduce 7


state 49
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	apply2 : L_par prog . R_par  (18)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	R_par  shift 66
	.  error


state 50
	fonction2 : Var C_eq . fonction  (21)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	Fun  shift 52
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 53
	fonction  goto 67
	apply  goto 13
	apply2  goto 14


state 51
	fonction2 : Var fonction2 .  (22)

	.  reduce 22


state 52
	fonction : Fun . Var Right_arrow fonction  (20)

	Var  shift 68
	.  error


state 53
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	fonction : prog .  (19)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	In  reduce 19


state 54
	prog : Let Var C_eq fonction . In prog  (12)

	In  shift 69
	.  error


state 55
	prog : Let Var fonction2 In . prog  (13)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 70
	apply  goto 13
	apply2  goto 14


state 56
	prog : Let_rec Var C_eq fonction . In prog  (14)

	In  shift 71
	.  error


state 57
	prog : Let_rec Var fonction2 In . prog  (15)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 72
	apply  goto 13
	apply2  goto 14


state 58
	exprb : L_par exprb L_par .  (25)

	.  reduce 25


state 59
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	exprb : prog C_eq prog .  (26)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	Then  reduce 26
	L_par  reduce 26


state 60
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	exprb : prog C_ge prog .  (28)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	Then  reduce 28
	L_par  reduce 28


state 61
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	exprb : prog C_neq prog .  (31)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	Then  reduce 31
	L_par  reduce 31


state 62
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	exprb : prog C_g prog .  (27)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	Then  reduce 27
	L_par  reduce 27


state 63
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	exprb : prog C_l prog .  (29)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	Then  reduce 29
	L_par  reduce 29


state 64
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	exprb : prog C_le prog .  (30)

	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	Then  reduce 30
	L_par  reduce 30


state 65
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	prog : If exprb Then prog . Else prog  (10)

	Else  shift 73
	Plus  shift 25
	Times  shift 26
	Minus  shift 27
	.  error


state 66
	apply2 : L_par prog R_par .  (18)

	.  reduce 18


state 67
	fonction2 : Var C_eq fonction .  (21)

	.  reduce 21


state 68
	fonction : Fun Var . Right_arrow fonction  (20)

	Right_arrow  shift 74
	.  error


state 69
	prog : Let Var C_eq fonction In . prog  (12)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 75
	apply  goto 13
	apply2  goto 14


state 70
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	prog : Let Var fonction2 In prog .  (13)

	.  reduce 13


state 71
	prog : Let_rec Var C_eq fonction In . prog  (14)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 76
	apply  goto 13
	apply2  goto 14


state 72
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	prog : Let_rec Var fonction2 In prog .  (15)

	.  reduce 15


state 73
	prog : If exprb Then prog Else . prog  (10)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 77
	apply  goto 13
	apply2  goto 14


state 74
	fonction : Fun Var Right_arrow . fonction  (20)

	Int  shift 3
	Var  shift 4
	Let  shift 5
	Fun  shift 52
	PrInt  shift 6
	Let_rec  shift 7
	If  shift 8
	Minus  shift 9
	L_par  shift 10
	.  error

	prog  goto 53
	fonction  goto 78
	apply  goto 13
	apply2  goto 14


state 75
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	prog : Let Var C_eq fonction In prog .  (12)

	.  reduce 12


state 76
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	prog : Let_rec Var C_eq fonction In prog .  (14)

	.  reduce 14


state 77
	prog : prog . Plus prog  (6)
	prog : prog . Minus prog  (7)
	prog : prog . Times prog  (9)
	prog : If exprb Then prog Else prog .  (10)

	.  reduce 10


state 78
	fonction : Fun Var Right_arrow fonction .  (20)

	.  reduce 20


State 13 contains 1 shift/reduce conflict.
State 45 contains 15 reduce/reduce conflicts.


29 terminals, 9 nonterminals
33 grammar rules, 79 states
